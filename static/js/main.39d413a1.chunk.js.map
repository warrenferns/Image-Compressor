{"version":3,"sources":["Images/Download.png","Images/Upload.png","Components/Compressor.js","App.js","serviceWorker.js","index.js"],"names":["Compressor","useState","compressedLink","setCompressedLink","originalImage","setOriginalImage","originalLink","setOriginalLink","clicked","setClicked","uploadImage","setUploadImage","outputFileName","setOutputFileName","className","Navbar","bg","variant","Brand","href","icon","faImage","size","Card","Img","src","Upload","class","type","accept","onChange","event","imageFile","target","files","URL","createObjectURL","name","uploadLink","onClick","e","preventDefault","output","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","alert","imageCompression","then","x","downloadLink","click","download","Download","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kQAAe,G,MAAA,IAA0B,sCCA1B,MAA0B,mC,uCCiI1BA,MAxHf,WAEE,MAA8CC,mBAAS,IAAvD,mBAAQC,EAAR,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAQG,EAAR,KAAuBC,EAAvB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAQK,EAAR,KAAsBC,EAAtB,KACA,EAAgCN,oBAAS,GAAzC,mBAAQO,EAAR,KAAiBC,EAAjB,KACA,EAAwCR,oBAAS,GAAjD,mBAAQS,EAAR,KAAqBC,EAArB,KACA,EAA8CV,mBAAS,IAAvD,mBAAQW,EAAR,KAAwBC,EAAxB,KAoCA,OACE,sBAAKC,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CAAQD,UAAU,gCAAgCE,GAAG,QAAQC,QAAQ,QAArE,SACE,eAACF,EAAA,EAAOG,MAAR,CAAcJ,UAAU,iBAAiBK,KAAK,IAA9C,UACE,cAAC,IAAD,CAAiBL,UAAU,wBAAwBM,KAAMC,IAASC,KAAM,IAAM,IADhF,mCAMA,sBAAKR,UAAU,WAAf,UACE,sBAAKA,UAAU,wCAAf,UACGJ,EACC,cAACa,EAAA,EAAKC,IAAN,CACEV,UAAU,QACVG,QAAQ,MACRQ,IAAKnB,IAGP,cAACiB,EAAA,EAAKC,IAAN,CACEV,UAAU,aACVG,QAAQ,MACRQ,IAAKC,IAGT,sBAAKZ,UAAU,mDAAf,UACA,wBAAQa,MAAM,eAAd,oBACE,uBACEC,KAAK,OACLC,OAAO,UACPf,UAAU,yBACVgB,SAAU,SAAAC,GAAK,OAhE7B,SAAoBA,GAClB,IAAMC,EAAYD,EAAME,OAAOC,MAAM,GACrC3B,EAAgB4B,IAAIC,gBAAgBJ,IACpC3B,EAAiB2B,GACjBnB,EAAkBmB,EAAUK,MAC5B1B,GAAe,GA2DgB2B,CAAWP,YAOpC,sBAAKjB,UAAU,qGAAf,UACE,uBACCF,EACC,wBACEgB,KAAK,SACLd,UAAU,gBACVyB,QAAS,SAAAC,GAAC,OArExB,SAAeA,GACbA,EAAEC,iBAEF,IAYIC,EAZEC,EAAU,CACdC,UAAW,EACXC,iBAAkB,IAClBC,cAAc,EACdC,eAAgB,IAGlB,OAAIJ,EAAQC,WAAaxC,EAAckB,KAAO,MAC5C0B,MAAM,0CACC,IAITC,YAAiB7C,EAAeuC,GAASO,MAAK,SAAAC,GAC5CT,EAASS,EACT,IAAMC,EAAejB,IAAIC,gBAAgBM,GACzCvC,EAAkBiD,MAGpB3C,GAAW,GACJ,GA8CmB4C,CAAMb,IAHtB,sBAQA,gCAIJ,sBAAK1B,UAAU,6CAAf,UACE,cAACS,EAAA,EAAKC,IAAN,CAAUV,UAAU,QAAQG,QAAQ,MAAMQ,IAAKvB,IAC9CM,EACC,qBAAKM,UAAU,gCAAf,SACE,mBACEK,KAAMjB,EACNoD,SAAU1C,EACVE,UAAU,yBAHZ,wBASF,cAACS,EAAA,EAAKC,IAAN,CACEV,UAAU,aACVG,QAAQ,MACRQ,IAAK8B,cC7GNC,MANf,WACE,OACE,cAAC,EAAD,KCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39d413a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Download.c48d93a8.png\";","export default __webpack_public_path__ + \"static/media/Upload.e0143b57.png\";","import React, {useState} from 'react';\r\nimport imageCompression from \"browser-image-compression\";\r\nimport './Compressor.css'\r\nimport Download from '../Images/Download.png';\r\nimport Upload from '../Images/Upload.png';\r\nimport {Navbar, Card} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Compressor(){\r\n\r\n  const [ compressedLink, setCompressedLink ] = useState(\"\");\r\n  const [ originalImage, setOriginalImage ] = useState(\"\");\r\n  const [ originalLink, setOriginalLink ] = useState(\"\");\r\n  const [ clicked, setClicked ] = useState(false);\r\n  const [ uploadImage, setUploadImage ] = useState(false);\r\n  const [ outputFileName, setOutputFileName ] = useState(\"\");\r\n\r\n  function uploadLink(event){\r\n    const imageFile = event.target.files[0];\r\n    setOriginalLink(URL.createObjectURL(imageFile));\r\n    setOriginalImage(imageFile);\r\n    setOutputFileName(imageFile.name);\r\n    setUploadImage(true);\r\n  }\r\n\r\n  function click(e){\r\n    e.preventDefault();\r\n\r\n    const options = {\r\n      maxSizeMB: 3,\r\n      maxWidthOrHeight: 800,\r\n      useWebWorker: true,\r\n      initialQuality: 0.5\r\n    };\r\n\r\n    if (options.maxSizeMB >= originalImage.size / 1024) {\r\n      alert(\"This image is already compressed fully\");\r\n      return 0;\r\n    }\r\n\r\n    let output;\r\n    imageCompression(originalImage, options).then(x => {\r\n      output = x;\r\n      const downloadLink = URL.createObjectURL(output);\r\n      setCompressedLink(downloadLink);\r\n    });\r\n\r\n    setClicked(true);\r\n    return 1;\r\n  };\r\n\r\n  return(\r\n    <div className=\"mainContainer\">\r\n      <Navbar className=\"navbar justify-content-center\" bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand className=\"navbar-content\" href=\"/\">\r\n          <FontAwesomeIcon className=\"social-icons changeOn\" icon={faImage} size={1} />{' '}\r\n          GithubCRCE Image Compressor\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12\">\r\n            {uploadImage ? (\r\n              <Card.Img\r\n                className=\"image\"\r\n                variant=\"top\"\r\n                src={originalLink}\r\n              ></Card.Img>\r\n            ) : (\r\n              <Card.Img\r\n                className=\"uploadCard\"\r\n                variant=\"top\"\r\n                src={Upload}\r\n              ></Card.Img>\r\n            )}\r\n            <div className=\"d-flex justify-content-center upload-btn-wrapper\">\r\n            <button class=\"btn btn-dark\">UPLOAD</button>\r\n              <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                className=\"mt-2 btn btn-dark w-75\"\r\n                onChange={event => uploadLink(event)}\r\n              />\r\n\r\n\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"col-xl-4 col-lg-4 col-md-12 mb-5 mt-4 col-sm-12 d-flex justify-content-center align-items-baseline\">\r\n            <br />\r\n            {outputFileName ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\" btn btn-dark\"\r\n                onClick={e => click(e)}\r\n              >\r\n                Compress\r\n              </button>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"col-xl-4 col-lg-4 col-md-12 col-sm-12 mt-3\">\r\n            <Card.Img className=\"image\" variant=\"top\" src={compressedLink}></Card.Img>\r\n            {clicked ? (\r\n              <div className=\"d-flex justify-content-center\">\r\n                <a\r\n                  href={compressedLink}\r\n                  download={outputFileName}\r\n                  className=\"mt-2 btn btn-dark w-75\"\r\n                >\r\n                  DOWNLOAD\r\n                </a>\r\n              </div>\r\n            ) : (\r\n              <Card.Img\r\n                className=\"uploadCard\"\r\n                variant=\"top\"\r\n                src={Download}\r\n              ></Card.Img>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Compressor;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Compressor from \"./Components/Compressor\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Compressor />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}